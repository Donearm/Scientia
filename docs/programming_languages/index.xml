<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming Languages on Scientia - Gianluca Fiore Knowledge Wiki</title>
    <link>https://donearm.github.io/Scientia/programming_languages/index.html</link>
    <description>Recent content in Programming Languages on Scientia - Gianluca Fiore Knowledge Wiki</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language><atom:link href="https://donearm.github.io/Scientia/programming_languages/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Assembly</title>
      <link>https://donearm.github.io/Scientia/programming_languages/assembly/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://donearm.github.io/Scientia/programming_languages/assembly/index.html</guid>
      <description>&lt;!-- vim-markdown-toc GFM --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#arm-assembly&#34;&gt;ARM Assembly&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#registers&#34;&gt;Registers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#x64-assembly&#34;&gt;X64 Assembly&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#general-registers&#34;&gt;General Registers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fpu-registers&#34;&gt;FPU Registers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- vim-markdown-toc --&gt;
&lt;h2 id=&#34;arm-assembly&#34;&gt;ARM Assembly&lt;/h2&gt;
&lt;h3 id=&#34;registers&#34;&gt;Registers&lt;/h3&gt;
&lt;p&gt;R0..R15 are 32bit, general registers. R13 doubles as the stack pointer (SP),
R14 is the link register (LR), R15 the program counter (PC).&lt;/p&gt;
&lt;h2 id=&#34;x64-assembly&#34;&gt;X64 Assembly&lt;/h2&gt;
&lt;h3 id=&#34;general-registers&#34;&gt;General Registers&lt;/h3&gt;
&lt;p&gt;RAX, RBX, RCX, RDX, RBP, RSI, RDI, RSP are identical to those of X86 Assembly.&lt;/p&gt;
&lt;p&gt;R8..R15 are 64bit registers, unique to X64 Assembly.&lt;/p&gt;
&lt;p&gt;RIP is 64bit&lt;/p&gt;</description>
    </item>
    <item>
      <title>Awk</title>
      <link>https://donearm.github.io/Scientia/programming_languages/awk/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://donearm.github.io/Scientia/programming_languages/awk/index.html</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#print-longest-line-value-of-a-file&#34;&gt;Pring longest line value of a file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#print-only-non-empty-lines&#34;&gt;Print only non-empty lines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#count-lines&#34;&gt;Count lines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#awk-as-grep&#34;&gt;Awk as Grep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#strings-substitution&#34;&gt;Strings substitution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#comparison&#34;&gt;Comparison&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#print-only-unique-lines-like-uniq&#34;&gt;Print only unique lines (like uniq)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regexp-matching&#34;&gt;Regexp matching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#variables-in-awk&#34;&gt;Variables in Awk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dates-in-awk&#34;&gt;Dates in Awk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#print-only-fields-after-the-first-2&#34;&gt;Print only fields after the first 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;print-longest-line-value-of-a-file&#34;&gt;Print longest line value of a file&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-awk&#34; data-lang=&#34;awk&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;expand&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;some_file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;awk&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{if (x &amp;lt; length()) x = length() } END { print “Longest row is ” x }&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;print-only-non-empty-lines&#34;&gt;Print only non-empty lines&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-awk&#34; data-lang=&#34;awk&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;awk&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;NF &amp;gt; 0&amp;#39;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;some_file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;count-lines&#34;&gt;Count lines&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-awk&#34; data-lang=&#34;awk&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;awk&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;END {print NR}&amp;#39;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;some_file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;awk-as-grep&#34;&gt;Awk as Grep&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-awk&#34; data-lang=&#34;awk&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;awk&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{print $2}&amp;#39;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;some_file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;which is a quicker alternative to &lt;code&gt;cat some_file | awk &#39;{print $2}&#39;&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bash</title>
      <link>https://donearm.github.io/Scientia/programming_languages/bash/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://donearm.github.io/Scientia/programming_languages/bash/index.html</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#functions&#34;&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scripts&#34;&gt;Scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#syntax&#34;&gt;Syntax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;functions&#34;&gt;Functions&lt;/h2&gt;
&lt;p&gt;namename prints the basename without extension&lt;br&gt;
ext prints extension of a file, including &amp;ldquo;.&amp;rdquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; namename&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	  &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;##*/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	  &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;name0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;%.*&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;name0&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:-&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; ext&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	  &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;##*/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	  &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;name0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;%.*&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	  &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;name0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:+&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name0&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ext&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;commands&#34;&gt;Commands&lt;/h2&gt;
&lt;h3 id=&#34;ctrl-key-bound&#34;&gt;CTRL Key Bound&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + _&lt;/code&gt; =  undo&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + @&lt;/code&gt; = set mark&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + a&lt;/code&gt; = Jump to the start of the line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + b&lt;/code&gt; = Move back a char&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + c&lt;/code&gt; = Terminate the command&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + d&lt;/code&gt; = Delete character under the cursor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + e&lt;/code&gt; = Jump to the end of the line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + f&lt;/code&gt; = Move forward a char&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + k&lt;/code&gt; = Delete from cursor to EOL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + l&lt;/code&gt; = Clear the screen&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + n&lt;/code&gt; = select the next command in history&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + p&lt;/code&gt; = select the previous command in history&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + r&lt;/code&gt; = Search the history backwards&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + R&lt;/code&gt; = Search the history backwards with multi occurrence&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + t&lt;/code&gt; = drag character before cursor over the one under the cursor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + u&lt;/code&gt; = Delete backward from cursor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + v&lt;/code&gt; = Insert next character verbatim&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + w&lt;/code&gt; = kill word before cursor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + x&lt;/code&gt; = kill backward to the beginning of line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + xx&lt;/code&gt; = Move between EOL and current cursor position&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + x @&lt;/code&gt; = Show possible hostname completions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + y&lt;/code&gt; = paste the text at top of the kill#ring&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + z&lt;/code&gt; = Suspend/ Stop the command&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;alt-key-bound&#34;&gt;ALT Key Bound&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Alt + &#39;&#39;&amp;lt;&#39;&#39;&lt;/code&gt; = Move to the first line in the history&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + &#39;&#39;&amp;gt;&#39;&#39;&lt;/code&gt; = Move to the last line in the history&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + ?&lt;/code&gt; = Show current completion list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + *&lt;/code&gt; = Insert all possible completions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + /&lt;/code&gt; = Attempt to complete filename&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + .&lt;/code&gt; = Yank last argument to previous command&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + b&lt;/code&gt; = Move backward&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + c&lt;/code&gt; = Capitalize the word&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + d&lt;/code&gt; = Delete word&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + f&lt;/code&gt; = Move forward&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + l&lt;/code&gt; = Make word lowercase&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + n&lt;/code&gt; = Search the history forwards non=incremental&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + p&lt;/code&gt; = Search the history backwards non=incremental&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + r&lt;/code&gt; = Recall command&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + t&lt;/code&gt; = Move words around&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + u&lt;/code&gt; = Make word uppercase&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + backspace&lt;/code&gt; = Delete backward from cursor&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;meta-key-bound&#34;&gt;Meta Key Bound&lt;/h3&gt;
&lt;p&gt;Meta usually corresponds to the &lt;code&gt;Esc&lt;/code&gt; key&lt;/p&gt;</description>
    </item>
    <item>
      <title>C</title>
      <link>https://donearm.github.io/Scientia/programming_languages/c/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://donearm.github.io/Scientia/programming_languages/c/index.html</guid>
      <description>&lt;h3 id=&#34;gcc&#34;&gt;Gcc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gcc -dM -E - &amp;lt;/dev/null&lt;/code&gt; = Print all the default macros&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Common Lisp</title>
      <link>https://donearm.github.io/Scientia/programming_languages/common_lisp/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://donearm.github.io/Scientia/programming_languages/common_lisp/index.html</guid>
      <description>&lt;h2 id=&#34;syntax-and-various-functions&#34;&gt;Syntax and various functions&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;print to stdout (t) the string&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:c&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;make an indexed list (plist)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;getf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;returns the value of &lt;code&gt;:a&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defvar&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;define var with given value&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;parse-integer&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;converts the string str in an integer (if possible)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;y-or-n-p&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;make a yes/no prompt with &lt;code&gt;string&lt;/code&gt; and waits the user input (basically until he press y or n)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;with-open-file&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;open filename and loads its contents in the variable &lt;code&gt;out&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;read, and eventually evaluates in lisp, the string &lt;code&gt;in&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go</title>
      <link>https://donearm.github.io/Scientia/programming_languages/go/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://donearm.github.io/Scientia/programming_languages/go/index.html</guid>
      <description>&lt;h3 id=&#34;commands&#34;&gt;Commands&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;go list all&lt;/code&gt; = List all installed packages, standard library&amp;rsquo;s included&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go list std&lt;/code&gt; = List only packages from the standard library&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go test -bench=.&lt;/code&gt; = Run benchmarks after the tests. &lt;code&gt;.&lt;/code&gt; stands for current directory, obviously&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go env&lt;/code&gt; = List all Go variables&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;go-modules&#34;&gt;Go Modules&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;go mod init&lt;/code&gt; = creates a new module by initializing the &lt;code&gt;go.mod&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go list -m all&lt;/code&gt; = prints the current module&amp;rsquo;s dependencies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go mod tidy&lt;/code&gt; = removes unused dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;test-coverage&#34;&gt;Test Coverage&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;go test -cover&lt;/code&gt; = prints the percentage of coverage of your unit tests&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go test -cover -coverprofile=c.out&lt;/code&gt; = save the coverage results in the &lt;code&gt;c.out&lt;/code&gt; file. With it it&amp;rsquo;s possible to have a html view of the tests&amp;rsquo; coverage with &lt;code&gt;go tool cover -html=c.out -o coverage.html&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Javascript</title>
      <link>https://donearm.github.io/Scientia/programming_languages/javascript/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://donearm.github.io/Scientia/programming_languages/javascript/index.html</guid>
      <description>&lt;h3 id=&#34;asmjs&#34;&gt;Asm.js&lt;/h3&gt;
&lt;p&gt;Asm.js can be defined as a singleton array representing the memory. Similar in concept to a VM&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gwt = compiler from Java to JS&lt;/li&gt;
&lt;li&gt;Emscripten and Mandreel = compilers from C++ to JS&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Lua</title>
      <link>https://donearm.github.io/Scientia/programming_languages/lua/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://donearm.github.io/Scientia/programming_languages/lua/index.html</guid>
      <description>&lt;h3 id=&#34;self-in-lua&#34;&gt;Self in Lua&lt;/h3&gt;
&lt;p&gt;Declaring a function as &lt;code&gt;t:test&lt;/code&gt; instead than &lt;code&gt;t.test&lt;/code&gt; will automatically set a variable named &lt;code&gt;self&lt;/code&gt; that refers to &lt;code&gt;t&lt;/code&gt;. If that is a table, it&amp;rsquo;ll be possible to use &lt;code&gt;self.a&lt;/code&gt; to refer to the value of object &lt;code&gt;a&lt;/code&gt; in table &lt;code&gt;t&lt;/code&gt; (like &lt;code&gt;table = {a=1}&lt;/code&gt;)&lt;/p&gt;
&lt;h3 id=&#34;coroutines&#34;&gt;Coroutines&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;coroutine.create(f)&lt;/code&gt; = where &lt;code&gt;f&lt;/code&gt; is a function&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coroutine.resume(c, [ares])&lt;/code&gt; = resume a coroutine, optionally passing an argument&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coroutine.running()&lt;/code&gt; = to obtain a reference to the currently running coroutine&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coroutine.status(c)&lt;/code&gt; = returns strings &amp;ldquo;running&amp;rdquo;, &amp;ldquo;suspended&amp;rdquo;, &amp;ldquo;normal&amp;rdquo;, &amp;ldquo;dead&amp;rdquo; according to the status of the coroutine&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coroutine.yield(...)&lt;/code&gt; = suspends the current coroutine and returns its arguments&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coroutine.wrap(f)&lt;/code&gt; = wrap a normal function so it can be used like &lt;code&gt;coroutine.yield()&lt;/code&gt; on it, like it were a coroutine&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Python</title>
      <link>https://donearm.github.io/Scientia/programming_languages/python/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://donearm.github.io/Scientia/programming_languages/python/index.html</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#generic-features-and-syntax&#34;&gt;Generic features and syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#decorators&#34;&gt;Decorators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#metaclasses&#34;&gt;Metaclasses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#set-operations&#34;&gt;Set operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modules&#34;&gt;Modules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;generic-features-and-syntax&#34;&gt;Generic features and syntax&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class.__mro__&lt;/code&gt; = Contains all the ancestors of the class, up till &lt;code&gt;object&lt;/code&gt;, the Python base class&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_&lt;/code&gt; = At Python prompt, it represents the last value. Mostly like &lt;code&gt;$?&lt;/code&gt; in Bash&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__file__&lt;/code&gt; = Contains the name of the file loaded (a module if importing or the filename of the script)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locals()&lt;/code&gt; = Returns a dictionary with the local namespace&lt;/li&gt;
&lt;li&gt;&lt;code&gt;globals()&lt;/code&gt; = Returns a dictionary with the global module namespace. Inside a class or function returns the module where this is declared, not where it&amp;rsquo;s being executed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enumerate()&lt;/code&gt; = Returns a list&amp;rsquo;s elements with numeric indexes. For example, &lt;code&gt;0, abc, 1, def&lt;/code&gt; etc.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[::2]&lt;/code&gt; = Slice of a list, iterating every 2 elements. Works also by selecting a range (&lt;code&gt;[1:10:2]&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[::-1]&lt;/code&gt; = Iterate over a list backward&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print(&amp;quot;The {foo} is a {bar}&amp;quot;.format(foo=&#39;answer&#39;, bar=&#39;42&#39;))&lt;/code&gt; = String substitution in print using an alphanumerical index&lt;/li&gt;
&lt;li&gt;&lt;code&gt;first,*rest,last = (1,2,3,4,5,6,7)&lt;/code&gt; = Assign first element of the tuple to &lt;code&gt;first&lt;/code&gt;, the last to &lt;code&gt;last&lt;/code&gt;, and all those in between to &lt;code&gt;rest&lt;/code&gt;. Python 3 only&lt;/li&gt;
&lt;li&gt;&lt;code&gt;first,second,*rest = 1,2,3,4,5,6&lt;/code&gt; = Similarly to above, assign 1 to first, 2 to second and from 3 onward to rest. Rest will result in a list (&lt;code&gt;[3,4,5,6]&lt;/code&gt;). Python 3 only&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__qualname__&lt;/code&gt; = Attribute of classes and functions showing the &amp;ldquo;path&amp;rdquo; from the module top-level to their definition. Practically shows all the parents functions/classes of a function/class. Only in Python &amp;gt;=3.3&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python -m pydoc -k keyword&lt;/code&gt; = Search Python documentation for &amp;ldquo;keyword&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python -m this&lt;/code&gt; = The Zen of Python ;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a[-3]&lt;/code&gt; = Negative indexing, returns the third to last element of a list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lastthree = slice(-3, None)&lt;/code&gt; = Saving a slice in a variable&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;decorators&#34;&gt;Decorators&lt;/h3&gt;
&lt;p&gt;Write a function like this:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sed</title>
      <link>https://donearm.github.io/Scientia/programming_languages/sed/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://donearm.github.io/Scientia/programming_languages/sed/index.html</guid>
      <description>&lt;h3 id=&#34;edit-a-string-in-multiple-files-at-once&#34;&gt;Edit a string in multiple files at once&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; f in &lt;span class=&#34;nv&#34;&gt;$files&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; grep &lt;span class=&#34;nv&#34;&gt;$oldstring&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sed &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/$oldstring/$newstring/g&amp;#39;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$f&lt;/span&gt; &amp;gt; &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;.new &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;this actually outputs every edited files to a new file. To edit in place, use sed with &lt;code&gt;-i&lt;/code&gt; and don&amp;rsquo;t redirect the output&lt;/p&gt;
&lt;h3 id=&#34;update-copyright-date-at-the-change-of-year&#34;&gt;Update copyright date at the change of year&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sed -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/2011\([, ] \)/2012\1/g&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;various-syntax&#34;&gt;Various syntax&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s/pattern//2g&lt;/code&gt; = Remove pattern from the second (2) to the last (g) occurrence of it, thus excluding the first&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;s/pattern/&amp;amp;/w file&#39; &amp;lt; inputfile&lt;/code&gt; = Save pattern from inputfile in file. Here &lt;code&gt;w&lt;/code&gt; stands for write and the &lt;code&gt;&amp;amp;&lt;/code&gt; represents the pattern itself&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;/^#/ s/pattern//g&#39;&lt;/code&gt; = Remove pattern in all occurrences (g) that are in lines starting with &lt;code&gt;#&lt;/code&gt; (^#). It&amp;rsquo;s possible to use &lt;code&gt;&#39;5 s/...//&#39;&lt;/code&gt; to remove only at the fifth line or &lt;code&gt;5,70&lt;/code&gt; to remove only between the fifth and seventh line. Also with &lt;code&gt;/pattern1/,/pattern2/&lt;/code&gt; to operate only on the text between pattern1 and pattern2&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/pattern/ a\insertion&lt;/code&gt; = Add insertion after pattern&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/pattern/ i\insertion&lt;/code&gt; = Add insertion before pattern&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/pattern/ c\newwholeline&lt;/code&gt; = Substitute pattern with newwholeline&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s/&amp;lt;[^&amp;gt;]*&amp;gt;//g&lt;/code&gt; = Remove all html tags&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;1i Title, Name&#39; file&lt;/code&gt; = add an header of &amp;ldquo;Title, Name&amp;rdquo; at the first line in file (&lt;code&gt;1&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;1a string&#39; file&lt;/code&gt; = like above but add the string &lt;strong&gt;after&lt;/strong&gt; the first line (&lt;code&gt;a&lt;/code&gt; instead of &lt;code&gt;i&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;$a string&#39; file&lt;/code&gt; = add string after the last line of file (&lt;code&gt;$&lt;/code&gt; means the end of the file here)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;s/^/String: /&#39; file&lt;/code&gt; = prepend String: to the beginning of every line (&lt;code&gt;^&lt;/code&gt;). Similarly, using &lt;code&gt;$&lt;/code&gt; instead append String: at the end&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;/string/p&#39; file&lt;/code&gt; = sed as grep&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;/string/d&#39; file&lt;/code&gt; = print only lines not containing the string. As &lt;code&gt;grep -v&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;/pattern/q&#39; file&lt;/code&gt; = print file only up until sed encounters &lt;code&gt;pattern&lt;/code&gt;. &lt;code&gt;q&lt;/code&gt; here means to quit when the action succeeds&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;s/^../XX/&#39; file&lt;/code&gt; = replace first (&lt;code&gt;^&lt;/code&gt;) 2 characters (&lt;code&gt;..&lt;/code&gt;) of every line in file with XX. The &lt;code&gt;^&lt;/code&gt; can be omitted, sed starts by default at the beginning of line. With &lt;code&gt;$&lt;/code&gt; the same can be done for the end of line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;s/.*/&amp;quot;&amp;amp;&amp;quot;/&#39; file&lt;/code&gt; = add a character (&lt;code&gt;&amp;quot;&lt;/code&gt;) before and after a string. &lt;code&gt;&amp;amp;&lt;/code&gt; denotes the pattern matched, &lt;code&gt;.*&lt;/code&gt; being the whole line/string&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Zsh</title>
      <link>https://donearm.github.io/Scientia/programming_languages/zsh/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://donearm.github.io/Scientia/programming_languages/zsh/index.html</guid>
      <description>&lt;h1 id=&#34;for-loops-syntax&#34;&gt;For loops syntax&lt;/h1&gt;
&lt;p&gt;In Zsh, the for loops syntax differs from Bash. Write a loop either like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; x &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; 3&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; x in &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; 3&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;parameter-expansion&#34;&gt;Parameter expansion&lt;/h1&gt;
&lt;p&gt;An alternative to the POSIX-complaint &lt;code&gt;${i%.ext}.newext&lt;/code&gt; in Zsh is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;.newext
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;:r&lt;/code&gt; tells the shell to automatically strip the extension, period included&lt;/p&gt;</description>
    </item>
  </channel>
</rss>